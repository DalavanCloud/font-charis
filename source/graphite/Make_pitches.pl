use strict;

# Build GDL code to implement pitch ligatures.
# 	-p option suppresses the PUA left-stem ligatures
my $VERSION = 0.07;	   #   AKW  2005-05-09
#	handle PUA characters being accepted into Unicode (F1D0 thru F1D4 -> A712 thru A716)
#my $VERSION = 0.06;	   #   JDC  2004-09-17
#	Reversed lists in cSupNum to correct reversed superscript numbers
#my $VERSION = 0.05;	   #   RMH  2004-01-27
#	Removed "else" clause in rule for displaying alternate glyphs because it
#	was causing the superscript numbers to be displayed as tone bars!
#my $VERSION = 0.04;	   #   RMH  12-Dec-2003
#	Changed PUA glyphs from F1Cx to F1Dx per change in PUA allocation plan
#my $VERSION = 0.03;	#   RMH  08-Oct-2003
#	Put in else clause so Pitch Numbers can be made the default feature value.
#my $VERSION = 0.02;    #   RMH	28-JUL-2003     
#	Change glyph names for g_foursuperior and g_fivesuperior due to AGL name change
#	3-char ligatures had first two chars backwards (duh).
#my $VERSION = 0.01;    #   RMH	11-JUL-2003     Original

my $skipPUA = (lc($ARGV[0]) eq '-p');

my ($i, $c1, $c2, $c3);
my @cSupNum =      qw(g_onesuperior g_twosuperior g_threesuperior g2074 g2075);
my @cPitch =       qw(02E9          02E8          02E7            02E6  02E5);
my @cPitch_left =  qw(A716          A715          A714            A713  A712);

print <<EOF;

/* pitches.gdh -- rules for making pitch ligatures.

   NOTE: This file generated by Make_pitches.pl. If you want to change this file,
   you might consider modifying Make_pitches.pl instead.
   
   Bob Hallissy  11 July 2003
*/

table(glyph);

cSupNum =       (g_onesuperior, g_twosuperior, g_threesuperior, g2074, g2075);
cPitch =        (g02E9,         g02E8,         g02E7,           g02E6, g02E5);
EOF
print "cPitch_left =   (gA716,         gA715,         gA714,           gA713, gA712);\n" unless $skipPUA;

my $gcount = 0;
sub printglyph
{
	my $g = shift;
	print "\n   " if ($gcount % 6) == 0;
	print " $g";
	if ($gcount < 29)
	{
		print ',';
		$gcount++;
	}
	else
	{
		print "\n";
		$gcount = 0;
	}
}


print "\ncPitches = (";
for $c1 (@cPitch)
{
	printglyph "g$c1";
	for $c2 (@cPitch)
	{
		printglyph "g$c1$c2";
	}
}
print ");\n";

unless ($skipPUA)
{
	print "\ncPitches_left = (";
	for $c1 (@cPitch_left)
	{
		printglyph "g$c1";
		for $c2 (@cPitch_left)
		{
			printglyph "g$c1$c2";
		}
	}
	print ");\n";
}
	
$i = 0;
for $c3 (@cPitch)
{
	print "\ncPitch$i = (";
	for $c1 (@cPitch)
	{
		printglyph "g$c1$c3";
		for $c2 (@cPitch)
		{
			printglyph "g$c1$c2$c3";
		}
	}
	$i++;
	print ");\n";
}

unless ($skipPUA)
{
	$i = 0;
	for $c3 (@cPitch_left)
	{
		print "\ncPitch${i}_left = (";
		for $c1 (@cPitch_left)
		{
			printglyph "g$c1$c3";
			for $c2 (@cPitch_left)
			{
				printglyph "g$c1$c2$c3";
			}
		}
		$i++;
		print ");\n";
	}
}

print <<EOF;

endtable;

table(substitution);

pass(1);

if (supernum == 1)
//    _ cPitch > g207B:3 cSupNum:3 / cSupNum _ _;	// include minus sign between digits
    cPitch > cSupNum;
//else
// NB: The normal algorithm includes this else-clause, but it cannot in this
// case because the cSupNum contains encoded characters that should NOT be displayed
// as tone bars if the feature happens to be off!
//	cSupNum > cPitch;
endif;

endpass;

pass(2);

EOF

$i = 0;
for $c1 (@cPitch)
{
	print "cPitches g$c1 > _ cPitch$i\$1 / _ ^ _;\n";
	$i++;
}

unless ($skipPUA)
{
	$i = 0;
	print "\n";
	for $c1 (@cPitch_left)
	{
		print "cPitches_left g$c1 > _ cPitch${i}_left\$1 / _ ^ _;\n";
		$i++;
	}
}

print <<EOF;

endpass;

endtable;

EOF

	

	